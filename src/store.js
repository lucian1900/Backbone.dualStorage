// Generated by CoffeeScript 1.6.3
var S4,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

Backbone.Store = (function() {
  function Store(name, storage) {
    this.name = name;
    this.storage = storage;
    this.data = {};
  }

  Store.prototype.generateId = function() {
    return S4() + S4() + '-' + S4() + '-' + S4() + '-' + S4() + '-' + S4() + S4() + S4();
  };

  Store.prototype.initialize = function() {
    var _this = this;
    return this.storage.get(this.name).then(function(savedData) {
      _this.data.records = (savedData != null ? savedData.records : void 0) || [];
      _this.data.dirty = (savedData != null ? savedData.dirty : void 0) || [];
      _this.data.destroyed = (savedData != null ? savedData.destroyed : void 0) || [];
      _this.data.local = (savedData != null ? savedData.local : void 0) || [];
      return _this.data.recordsById = (savedData != null ? savedData.recordsById : void 0) || {};
    });
  };

  Store.prototype.save = function() {
    return this.storage.set(this.name, this.data);
  };

  Store.prototype.toggleModel = function(target, model, status) {
    var _ref, _ref1;
    if (status && (_ref = model.id, __indexOf.call(this.data[target], _ref) < 0)) {
      this.data[target].push(model.id);
    } else if (!status && (_ref1 = model.id, __indexOf.call(this.data[target], _ref1) >= 0)) {
      this.data[target] = _.without(this.data[target], model.id);
    }
    return this.save().then(function() {
      return model;
    });
  };

  Store.prototype.isDirty = function(model, status) {
    var _ref, _ref1;
    if (_ref = model.id, __indexOf.call(this.data.records, _ref) < 0) {
      throw new Error("model with id " + model.id + " is not in the store.");
    }
    if (_ref1 = model.id, __indexOf.call(this.data.destroyed, _ref1) >= 0) {
      throw new Error("can't mark model with id " + model.id + " as dirty because it is marked as destroyed.");
    }
    return this.toggleModel('dirty', model, status);
  };

  Store.prototype.isDestroyed = function(model, status) {
    var _ref, _ref1;
    if (_ref = model.id, __indexOf.call(this.data.records, _ref) >= 0) {
      throw new Error("can't mark model with id " + model.id + " as destroyed because it is still in the store.");
    }
    if (_ref1 = model.id, __indexOf.call(this.data.dirty, _ref1) >= 0) {
      throw new Error("can't mark model with id " + model.id + " as destroyed because it is marked as dirty.");
    }
    return this.toggleModel('destroyed', model, status);
  };

  Store.prototype.add = function(models) {
    var model, _i, _len, _ref;
    if (!_.isArray(models)) {
      models = [models];
    }
    for (_i = 0, _len = models.length; _i < _len; _i++) {
      model = models[_i];
      if (_ref = model.id, __indexOf.call(this.data.records, _ref) >= 0) {
        throw new Error("model with id " + model.id + " is already in the store.");
      }
      if (!model.id) {
        model.id = this.generateId();
        model.set(model.idAttribute, model.id);
        this.data.local.push(model.id);
      }
      this.data.records.push(model.id);
      this.data.recordsById[model.id] = model.toJSON();
    }
    return this.save().then(function() {
      if (models.length === 1) {
        return models[0];
      } else {
        return models;
      }
    });
  };

  Store.prototype.update = function(model) {
    var _ref;
    if (!model.id) {
      throw new Error("model does not have an id.");
    }
    if (_ref = model.id, __indexOf.call(this.data.records, _ref) < 0) {
      throw new Error("model with id " + model.id + " is not in the store, try adding instead of updating.");
    }
    this.data.recordsById[model.id] = model.toJSON();
    return this.save().then(function() {
      return model;
    });
  };

  Store.prototype.remove = function(model) {
    delete this.data.recordsById[model.id];
    this.data.dirty = _.without(this.data.dirty, model.id);
    this.data.local = _.without(this.data.local, model.id);
    this.data.records = _.without(this.data.records, model.id);
    return this.save().then(function() {
      return model;
    });
  };

  Store.prototype.clear = function() {
    this.data = {};
    return this.save();
  };

  Store.prototype.find = function(id) {
    var model, _ref, _results;
    if (id) {
      return this.data.recordsById[id];
    } else {
      _ref = this.data.recordsById;
      _results = [];
      for (id in _ref) {
        model = _ref[id];
        _results.push(model);
      }
      return _results;
    }
  };

  Store.prototype.findDirty = function(id) {
    var _i, _len, _ref, _results;
    if (id) {
      if (__indexOf.call(this.data.dirty, id) >= 0) {
        return this.data.recordsById[id];
      }
    } else {
      _ref = this.data.dirty;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        id = _ref[_i];
        _results.push(this.data.recordsById[id]);
      }
      return _results;
    }
  };

  Store.prototype.findDestroyed = function(id) {
    if (id) {
      return __indexOf.call(this.data.destroyed, id) >= 0;
    } else {
      return this.data.destroyed;
    }
  };

  Store.prototype.hasDirtyOrDestroyed = function() {
    return !_.isEmpty(this.data.dirty) || !_.isEmpty(this.data.destroyed);
  };

  return Store;

})();

S4 = function() {
  return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
};
