// Generated by CoffeeScript 1.6.3
(function() {
  var Backbone;

  Backbone = window.Backbone;

  describe('monkey patching', function() {
    return it('aliases Backbone.sync to backboneSync', function() {
      expect(window.backboneSync).toBeDefined();
      return expect(window.backboneSync.identity).toEqual('sync');
    });
  });

  describe('offline storage sync', function() {
    var collection;
    collection = {}.collection;
    beforeEach(function() {
      var done;
      console.log('beforeEach');
      done = false;
      collection = new Backbone.Collection([
        {
          id: 2,
          color: 'auburn'
        }, {
          id: 3,
          color: 'burgundy'
        }, {
          id: 'a',
          color: 'scarlet'
        }, {
          id: 'deadbeef-c03d-f00d-aced-dec0ded4b1ff',
          color: 'pearl'
        }
      ]);
      collection.url = function() {
        return 'cats';
      };
      runs(function() {
        console.log('runs');
        Backbone.storageAdapter = new Backbone.storageAdapters.StickyStorageAdapter;
        return Backbone.storageAdapter.initialize().done(function() {
          console.log('initialized');
          return Backbone.storageAdapter.clear().done(function() {
            var items, key, value;
            console.log('cleared');
            items = {
              cats: '2,3,a,deadbeef-c03d-f00d-aced-dec0ded4b1ff',
              cats_dirty: '2,a,deadbeef-c03d-f00d-aced-dec0ded4b1ff',
              cats_destroyed: '3',
              cats2: '{"id": "2", "color": "auburn"}',
              cats3: '{"id": "3", "color": "burgundy"}',
              catsa: '{"id": "a", "color": "scarlet"}',
              catsnew: '{"id": "deadbeef-c03d-f00d-aced-dec0ded4b1ff", "color": "pearl"}'
            };
            return $.when.apply($, ((function() {
              var _results;
              _results = [];
              for (key in items) {
                value = items[key];
                _results.push(Backbone.storageAdapter.setItem(key, value));
              }
              return _results;
            })())).done(function() {
              console.log('done');
              return done = true;
            });
          });
        });
      });
      return waitsFor(function() {
        return done;
      });
    });
    describe('syncDirtyAndDestroyed', function() {
      return it('calls syncDirty and syncDestroyed', function() {
        var syncDestroyed, syncDirty;
        syncDirty = spyOn(Backbone.Collection.prototype, 'syncDirty').andCallThrough();
        syncDestroyed = spyOn(Backbone.Collection.prototype, 'syncDestroyed').andCallThrough();
        return collection.syncDirtyAndDestroyed().then(function() {
          expect(syncDirty).toHaveBeenCalled();
          return expect(syncDestroyed).toHaveBeenCalled();
        });
      });
    });
    describe('syncDirty', function() {
      it('finds and saves all dirty models', function() {
        var saveInteger, saveString;
        saveInteger = spyOn(collection.get(2), 'save').andCallThrough();
        saveString = spyOn(collection.get('a'), 'save').andCallThrough();
        return collection.syncDirty().then(function() {
          expect(saveInteger).toHaveBeenCalled();
          expect(saveString).toHaveBeenCalled();
          return Backbone.storageAdapter.getItem('cats_dirty').then(function(item) {
            return expect(item).toBeFalsy();
          });
        });
      });
      return it('works when there are no dirty records', function() {
        return Backbone.storageAdapter.removeItem('cats_dirty').then(function() {
          return collection.syncDirty();
        });
      });
    });
    return describe('syncDestroyed', function() {
      it('finds all models marked as destroyed and destroys them', function() {
        var destroy;
        destroy = spyOn(collection.get(3), 'destroy');
        return collection.syncDestroyed().then(function() {
          return Backbone.storageAdapter.getItem('cats_destroyed').then(function(item) {
            return expect(item).toBeFalsy();
          });
        });
      });
      return it('works when there are no destroyed records', function() {
        return Backbone.storageAdapter.setItem('cats_destroyed', '').then(function() {
          return collection.syncDestroyed();
        });
      });
    });
  });

}).call(this);
