// Generated by CoffeeScript 1.3.3
(function() {
  var collection, model, _ref;

  _ref = {}, collection = _ref.collection, model = _ref.model;

  beforeEach(function() {
    window.onlineSync.calls = [];
    window.localsync('clear', {}, {
      ignoreCallbacks: true,
      storeName: 'eyes/'
    });
    collection = new Backbone.Collection({
      id: 123,
      vision: 'crystal'
    });
    collection.url = 'eyes/';
    return model = collection.models[0];
  });

  describe('using Backbone.sync directly', function() {
    return it('should save and retrieve data', function() {
      var errorCallback, successCallback;
      localStorage.clear();
      successCallback = jasmine.createSpy('success');
      errorCallback = jasmine.createSpy('error');
      window.dualsync('create', model, {
        success: successCallback,
        error: errorCallback
      });
      expect(window.onlineSync.calls.length).toEqual(1);
      expect(successCallback).toHaveBeenCalled();
      expect(errorCallback).not.toHaveBeenCalled();
      expect(window.localStorage.length).toBeGreaterThan(0);
      successCallback = jasmine.createSpy('success').andCallFake(function(resp) {
        return expect(resp.get('vision')).toEqual('crystal');
      });
      errorCallback = jasmine.createSpy('error');
      window.dualsync('read', model, {
        success: successCallback,
        error: errorCallback
      });
      expect(window.onlineSync.calls.length).toEqual(2);
      expect(successCallback).toHaveBeenCalled();
      return expect(errorCallback).not.toHaveBeenCalled();
    });
  });

  describe('using backbone models and retrieving from local storage', function() {
    return it("fetches a model after saving it", function() {
      var fetched, retrievedModel, saved;
      saved = false;
      runs(function() {
        return model.save({}, {
          success: function() {
            return saved = true;
          }
        });
      });
      waitsFor((function() {
        return saved;
      }), "The success callback for 'save' should have been called", 100);
      fetched = false;
      retrievedModel = new Backbone.Model({
        id: 123
      });
      retrievedModel.collection = collection;
      runs(function() {
        return retrievedModel.fetch({
          remote: false,
          success: function() {
            return fetched = true;
          }
        });
      });
      waitsFor((function() {
        return fetched;
      }), "The success callback for 'fetch' should have been called", 100);
      return runs(function() {
        return expect(retrievedModel.get('vision')).toEqual('crystal');
      });
    });
  });

  describe('using backbone collections and retrieving from local storage', function() {
    return it('loads a collection after adding several models to it', function() {
      var fetched, saved;
      saved = 0;
      runs(function() {
        var id, newModel, _i;
        for (id = _i = 1; _i <= 3; id = ++_i) {
          newModel = new Backbone.Model({
            id: id
          });
          newModel.collection = collection;
          newModel.save({}, {
            success: function() {
              return saved += 1;
            }
          });
        }
        return waitsFor((function() {
          return saved === 3;
        }), "The success callback for 'save' should have been called for id #" + id, 100);
      });
      fetched = false;
      runs(function() {
        return collection.fetch({
          remote: false,
          success: function() {
            return fetched = true;
          }
        });
      });
      waitsFor((function() {
        return fetched;
      }), "The success callback for 'fetch' should have been called", 100);
      return runs(function() {
        expect(collection.length).toEqual(3);
        return expect(collection.map(function(model) {
          return model.id;
        })).toEqual([1, 2, 3]);
      });
    });
  });

}).call(this);
