// Generated by CoffeeScript 1.6.3
var StickyStorage;

StickyStorage = Backbone.storageAdapters.StickyStorageAdapter;

describe('StorageAdapters', function() {
  var storageClass, storageName, _ref, _results;
  _ref = Backbone.storageAdapters;
  _results = [];
  for (storageName in _ref) {
    storageClass = _ref[storageName];
    _results.push((function(storageName, storageClass) {
      var _describe;
      _describe = storageClass === StickyStorage ? describe.skip : describe;
      return _describe(storageName, function() {
        it('takes a name in its constructor and initializes', function(done) {
          var storage;
          storage = new storageClass('SuperSizedStorage');
          return storage.initialize().done(function() {
            expect(storage.name).to.equal('SuperSizedStorage');
            expect(storage.store).to.exist;
            return storage.clear().done(function() {
              return done();
            });
          });
        });
        return _describe('methods', function() {
          var storage;
          storage = {}.storage;
          beforeEach(function(done) {
            storage = new storageClass;
            return storage.initialize().done(function() {
              return done();
            });
          });
          afterEach(function(done) {
            return storage.clear().done(function() {
              return done();
            });
          });
          it('sets and gets a record', function(done) {
            return storage.set('item', {
              foo: 'bar'
            }).done(function() {
              return storage.get('item').done(function(item) {
                expect(item).to.eql({
                  foo: 'bar'
                });
                return done();
              });
            });
          });
          it('deletes a record', function(done) {
            return storage.set('item', {
              foo: 'bar'
            }).done(function() {
              return storage.remove('item').done(function() {
                return storage.get('item').done(function(item) {
                  expect(item).to.not.ok;
                  return done();
                });
              });
            });
          });
          return it('clears all records', function(done) {
            return storage.set('item1', 1).done(function() {
              return storage.set('item2', 2).done(function() {
                return storage.clear().done(function() {
                  return storage.get('item1').done(function(item1) {
                    expect(item1).to.not.ok;
                    return storage.get('item2').done(function(item2) {
                      expect(item2).to.not.ok;
                      return done();
                    });
                  });
                });
              });
            });
          });
        });
      });
    })(storageName, storageClass));
  }
  return _results;
});
