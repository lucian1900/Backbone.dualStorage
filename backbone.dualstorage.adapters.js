// Generated by CoffeeScript 1.6.3
var LawnchairStorageAdapter, LocalStorageAdapter, StickyStorageAdapter;

LocalStorageAdapter = (function() {
  function LocalStorageAdapter(name) {
    this.name = name || 'Backbone.dualStorage.LocalStorage';
    this.store = localStorage;
  }

  LocalStorageAdapter.prototype.initialize = function() {
    return $.Deferred().resolve();
  };

  LocalStorageAdapter.prototype.set = function(key, value) {
    this.store.setItem(key, JSON.stringify(value));
    return $.Deferred().resolve(value);
  };

  LocalStorageAdapter.prototype.get = function(key) {
    return $.Deferred().resolve(JSON.parse(this.store.getItem(key)));
  };

  LocalStorageAdapter.prototype.remove = function(key) {
    this.store.removeItem(key);
    return $.Deferred().resolve();
  };

  LocalStorageAdapter.prototype.clear = function() {
    this.store.clear();
    return $.Deferred().resolve();
  };

  return LocalStorageAdapter;

})();

LawnchairStorageAdapter = (function() {
  function LawnchairStorageAdapter(name) {
    this.name = name || 'Backbone.dualStorage.Lawnchair';
  }

  LawnchairStorageAdapter.prototype.initialize = function() {
    var promise;
    promise = $.Deferred();
    this.store = new Lawnchair({
      name: this.name,
      adapter: ['indexed-db']
    }, function() {
      return promise.resolve();
    });
    return promise;
  };

  LawnchairStorageAdapter.prototype.set = function(key, value) {
    var promise;
    promise = $.Deferred();
    this.store.save({
      key: key,
      value: value
    }, function(data) {
      return promise.resolve(data.value);
    });
    return promise;
  };

  LawnchairStorageAdapter.prototype.get = function(key) {
    var promise;
    promise = $.Deferred();
    this.store.get(key, function(data) {
      return promise.resolve(data != null ? data.value : void 0);
    });
    return promise;
  };

  LawnchairStorageAdapter.prototype.remove = function(key) {
    var promise;
    promise = $.Deferred();
    this.store.remove(key, function() {
      return promise.resolve();
    });
    return promise;
  };

  LawnchairStorageAdapter.prototype.clear = function() {
    var promise;
    promise = $.Deferred();
    this.store.nuke(function() {
      return promise.resolve();
    });
    return promise;
  };

  return LawnchairStorageAdapter;

})();

StickyStorageAdapter = (function() {
  function StickyStorageAdapter(name) {
    this.name = name || 'Backbone.dualStorage.Sticky';
  }

  StickyStorageAdapter.prototype.initialize = function() {
    var promise;
    promise = $.Deferred();
    this.store = new StickyStore({
      name: this.name,
      adapters: ['indexedDB'],
      ready: function() {
        return promise.resolve();
      }
    });
    return promise;
  };

  StickyStorageAdapter.prototype.set = function(key, value) {
    var promise;
    promise = $.Deferred();
    this.store.set({
      key: key,
      value: value
    }, function(data) {
      return promise.resolve(data.value);
    });
    return promise;
  };

  StickyStorageAdapter.prototype.get = function(key) {
    var promise;
    promise = $.Deferred();
    this.store.get(key, function(data) {
      return promise.resolve(data != null ? data.value : void 0);
    });
    return promise;
  };

  StickyStorageAdapter.prototype.remove = function(key) {
    var promise;
    promise = $.Deferred();
    this.store.remove(key, function() {
      return promise.resolve();
    });
    return promise;
  };

  StickyStorageAdapter.prototype.clear = function() {
    var promise;
    promise = $.Deferred();
    this.store.removeAll(function() {
      return promise.resolve();
    });
    return promise;
  };

  return StickyStorageAdapter;

})();

Backbone.storageAdapters = {
  LocalStorageAdapter: LocalStorageAdapter,
  LawnchairStorageAdapter: LawnchairStorageAdapter
};
